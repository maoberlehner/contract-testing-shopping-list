// TODO
// import { Hono } from "hono";
// import { components, paths } from "./my-openapi-3-schema"; // generated by openapi-typescript

// const app = new Hono();

// /** /users */
// app.get("/users", async (ctx) => {
//   try {
//     const users = db.get("SELECT * from users");
//     return ctx.json<
//       paths["/users"]["responses"][200]["content"]["application/json"]
//     >(users);
//   } catch (err) {
//     return ctx.json<components["schemas"]["Error"]>({
//       status: 500,
//       message: err ?? "An error occurred",
//     });
//   }
// });

// export default app;

// import { Hono } from 'hono';
// import { createHonoOpenApiRouter } from 'openapi-ts-router';
// import { zValidator } from 'validation-adapters/zod';
// import * as z from 'zod';
// import { paths } from './gen/v1'; // OpenAPI-generated types
// import { PetSchema } from './schemas'; // Custom reusable schema for validation

// export const router = new Hono();
// export const openApiRouter = createHonoOpenApiRouter<paths>(router);

// // GET /pet/{petId}
// openApiRouter.get('/pet/{petId}', {
//   pathValidator: zValidator(
//     z.object({
//       petId: z.number() // Validate that petId is a number
//     })
//   ),
//   handler: (c) => {
//     const { petId } = c.req.valid('param'); // Access validated params
//     return c.json({ name: 'Falko', photoUrls: [] });
//   }
// });

// // POST /pet
// openApiRouter.post('/pet', {
//   bodyValidator: zValidator(PetSchema), // Validate request body using PetSchema
//   handler: (c) => {
//     const { name, photoUrls } = c.req.valid('json'); // Access validated body data
//     return c.json({ name, photoUrls });
//   }
// });

import { serve } from "@hono/node-server";
import { Hono } from "hono";
import {
  add,
  list,
  remove,
  update,
  type ItemCreate,
} from "./repositories/item.ts";
import { logger } from "hono/logger";

const app = new Hono();
app.use(logger());

app.post("/shopping-list/items", async (c) => {
  const item = await c.req.json<ItemCreate>();
  return c.json(await add(item), 201);
});

app.get("/shopping-list/items", async (c) => {
  return c.json(await list());
});

app.put("/shopping-list/items/:id", async (c) => {
  const item = await c.req.json<ItemCreate>();
  const id = c.req.param("id");
  return c.json(await update(id, item));
});

app.delete("/shopping-list/items/:id", async (c) => {
  const id = c.req.param("id");
  await remove(id);
  return c.json({ deleted: true }, 200);
});

app.get("/shopping-list/health", async (c) => {
  return c.json({ healthy: true });
});

serve(
  {
    fetch: app.fetch,
    port: process.env.PORT ? Number(process.env.PORT) : 8080,
  },
  (info) => {
    console.log(`Server is running on http://localhost:${info.port}`);
  }
);
